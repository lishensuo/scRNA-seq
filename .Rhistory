list.files("KC-example/filtered_feature_bc_matrix/")
# 2、质控过滤低质量细胞/基因----
## 2.1 指标计算及可视化(过滤前)----
feats <- c("nFeature_RNA", "nCount_RNA")
VlnPlot(scRNA, features = feats, pt.size = 0.01, ncol = 2) +
NoLegend()
# 1、创建Seurat对象----
library(Seurat)
list.files("KC-example/filtered_feature_bc_matrix/")
counts = Read10X("KC-example/filtered_feature_bc_matrix/")
scRNA=CreateSeuratObject(counts = counts)
dim(scRNA)
scRNA@assays$RNA@counts[1:4, 1:4]
head(scRNA@meta.data)
#计算线粒体基因比例
mito_genes=rownames(scRNA)[grep("^MT-", rownames(scRNA))]
mito_genes
scRNA=PercentageFeatureSet(scRNA, "^MT-", col.name = "percent_mito")
fivenum(scRNA@meta.data$percent_mito)
#计算核糖体基因比例
ribo_genes=rownames(scRNA)[grep("^Rp[sl]", rownames(scRNA),ignore.case = T)]
ribo_genes
scRNA=PercentageFeatureSet(scRNA, "^RP[SL]", col.name = "percent_ribo")
fivenum(scRNA@meta.data$percent_ribo)
#计算红血细胞基因比例
rownames(scRNA)[grep("^Hb[^(p)]", rownames(scRNA),ignore.case = T)]
scRNA=PercentageFeatureSet(scRNA, "^HB[^(P)]", col.name = "percent_hb")
fivenum(scRNA@meta.data$percent_hb)
scRNA=PercentageFeatureSet(scRNA, "^HB[^(P)]", col.name = "percent_hb")
fivenum(scRNA@meta.data$percent_hb)
#计算红血细胞基因比例
hb_genes=rownames(scRNA)[grep("^Hb[^(p)]", rownames(scRNA),ignore.case = T)]
str(hb_genes)
scRNA=PercentageFeatureSet(scRNA, "^HB[^(P)]", col.name = "percent_hb")
fivenum(scRNA@meta.data$percent_hb)
feats <- c("percent_mito","percent_ribo", "percent_hb")
VlnPlot(scRNA, group.by = "orig.ident", features = feats, pt.size = 0.01, ncol = 3) +
NoLegend()
### （3）根据上述指标进行过滤
retained_c <- retained_c_umi & retained_c_mito & retained_c_ribo & retained_c_hb
table(retained_c)
### （1）bad cells ----
retained_c_umi <- scRNA$nFeature_RNA > 300
retained_c_mito <- scRNA$percent_mito < 15
retained_c_ribo <- scRNA$percent_ribo > 3
retained_c_hb <- scRNA$percent_hb < 0.1
### （2）bad genes ----
retained_f_low <- Matrix::rowSums(scRNA@assays$RNA@counts>0) > 3
### （3）根据上述指标进行过滤
retained_c <- retained_c_umi & retained_c_mito & retained_c_ribo & retained_c_hb
table(retained_c)
retained_f <- retained_f_low
table(retained_f)
### （3）根据上述指标进行过滤
retained_c <- retained_c_umi & retained_c_mito & retained_c_ribo & retained_c_hb
table(retained_c)
retained_f <- retained_f_low
table(retained_f)
## 2.3 可视化过滤之后的指标 ----
feats <- c("nFeature_RNA", "nCount_RNA")
VlnPlot(scRNA_filt, features = feats, pt.size = 0.01, ncol = 2) +
NoLegend()
scRNA_filt=scRNA[retained_f, retained_c]
dim(scRNA_filt)
## 2.3 可视化过滤之后的指标 ----
feats <- c("nFeature_RNA", "nCount_RNA")
VlnPlot(scRNA_filt, features = feats, pt.size = 0.01, ncol = 2) +
NoLegend()
feats <- c("percent_mito","percent_ribo", "percent_hb")
VlnPlot(scRNA_filt, group.by = "orig.ident", features = feats, pt.size = 0.01, ncol = 3) +
NoLegend()
# 3、标准化-归一化-高变基因 ----
#标高归
scRNA=scRNA_filt
scRNA <- NormalizeData(scRNA, normalization.method = "LogNormalize", scale.factor = 10000)
scRNA <- ScaleData(scRNA, features = VariableFeatures(scRNA),
vars.to.regress = c("nFeature_RNA","percent_mito"))
scRNA <- FindVariableFeatures(scRNA, selection.method = "vst", nfeatures = 2000)
# 可视化高变基因
top10 <- head(VariableFeatures(scRNA), 10)
p_hvg <- VariableFeaturePlot(scRNA)
LabelPoints(plot = p_hvg, points = top10, repel = TRUE, size=2.5) +
theme(legend.position = c(0.1,0.8))
library(ggplot2)
LabelPoints(plot = p_hvg, points = top10, repel = TRUE, size=2.5) +
theme(legend.position = c(0.1,0.8))
# 4、降维（PCA、tSNE、UMAP）、分群 ----
scRNA <- RunPCA(scRNA, features = VariableFeatures(scRNA))
ElbowPlot(scRNA, ndims=30, reduction="pca")
pc.num=1:20
# scRNA = RunTSNE(scRNA, dims = pc.num)
# DimPlot(scRNA, reduction = "tsne")
scRNA = RunUMAP(scRNA, dims = pc.num)
DimPlot(scRNA, reduction = "umap")
scRNA <- FindNeighbors(scRNA, dims = pc.num)
scRNA <- FindClusters(scRNA, resolution = c(0.01,0.05,0.1,0.2,0.5,0.7,0.9))
library(clustree)
library(patchwork)
clustree(scRNA@meta.data, prefix = "RNA_snn_res.")
#选择合适的resolution
Idents(scRNA) = scRNA$RNA_snn_res.0.2
table(scRNA@active.ident)
p_umap = DimPlot(scRNA, reduction = "umap" ,label = T)
p_umap
# 5、根据marker gene注释细胞类型----
#B cell : 9
cg=c("CD79A","CD79B","IGKC","CD19","MZB1","MS4A1")
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip() + p_umap
#T cell : 6
cg=c("CD3D",'CD3E','TRAG','CD3G','CD2')
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
#Cancer cell / Epithelial : 0,3,4,5,10
cg=c("EPCAM","PAX8","KRT18","CD24","KRT19","SCGB2A2","KRT5","KRT15" )
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
#Meyloid cell: 1
cg=c("CD68","LYZ","MARCO","AIF1","TYROBR","MS4A6A","CD1E","IL3RA","LAMP3")
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
#Endothelial cell: 2,8
cg=c("CLDN5","PECAM1","VWF","FLT1","RAMP2")
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
#Fibroblasts(CAF): 7
cg=c("COL1A1","COL1A2","COL3A1","BGN","DCN","POSTN","C1R")
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
cgs = list(
Epi = c("EPCAM","PAX8","KRT18","CD24","KRT19","SCGB2A2","KRT5","KRT15"),
Meyloid = c("CD68","LYZ","MARCO","AIF1","TYROBR","MS4A6A","CD1E","IL3RA","LAMP3"),
T_cell = c("CD3D",'CD3E','TRAG','CD3G','CD2'),
B_cell = c("CD79A","CD79B","IGKC","CD19","MZB1","MS4A1"),
Endo = c("CLDN5","PECAM1","VWF","FLT1","RAMP2"),
Fibro = c("COL1A1","COL1A2","COL3A1","BGN","DCN","POSTN","C1R")
)
#为了美观的展示dotplot，需要调整cluster的leve水平
scRNA@active.ident = factor(scRNA@active.ident, levels = c(0,3,4,5,10,1,6,9,2,8,7))
DotPlot(scRNA, features = cgs, assay = "RNA") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
p_umap + plot_layout(widths = c(2, 1))
## 5.2 celltype 与 marker ----
cgs = list(
Epi = c("EPCAM","PAX8","KRT18","CD24","KRT19","SCGB2A2","KRT5","KRT15"),
Meyloid = c("CD68","LYZ","MARCO","AIF1","TYROBR","MS4A6A","CD1E","IL3RA","LAMP3"),
T_cell = c("CD3D",'CD3E','TRAG','CD3G','CD2'),
B_cell = c("CD79A","CD79B","IGKC","CD19","MZB1","MS4A1"),
Endo = c("CLDN5","PECAM1","VWF","FLT1","RAMP2"),
Fibro = c("COL1A1","COL1A2","COL3A1","BGN","DCN","POSTN","C1R")
)
## 5.2 celltype 与 marker ----
scRNA$celltype = ifelse(scRNA@active.ident %in% c(0,3,4,5,10), "Epi",
ifelse(scRNA@active.ident %in% c(1), "Meyloid",
ifelse(scRNA@active.ident %in% c(6), "T_cell",
ifelse(scRNA@active.ident %in% c(9), "B_cell",
ifelse(scRNA@active.ident %in% c(2,8), "Endo","Fibro")))))
Idents(scRNA) = scRNA$celltype
table(scRNA@active.ident)
scRNA@active.ident = factor(scRNA@active.ident, levels = c("Epi","Meyloid","T_cell",
"B_cell","Endo","Fibro"))
p_umap = DimPlot(scRNA, reduction = "umap")
DotPlot(scRNA, features = cgs, assay = "RNA") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
p_umap + plot_layout(widths = c(2, 1))
# 6、celltype-level DEG
diff.wilcox = FindAllMarkers(scRNA)
head(diff.wilcox)
library(tidyverse)
all.markers = diff.wilcox %>% select(gene, everything()) %>%
subset(p_val<0.05 & abs(diff.wilcox$avg_log2FC) > 0.5)
top5 = all.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC)
DoHeatmap(scRNA, features = top5$gene)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 16,
fig.height = 8
)
library(Seurat)
list.files("KC-example/filtered_feature_bc_matrix/")
counts = Read10X("KC-example/filtered_feature_bc_matrix/")
scRNA=CreateSeuratObject(counts = counts)
dim(scRNA)
scRNA@assays$RNA@counts[1:4, 1:4]
head(scRNA@meta.data)
library(Seurat)
list.files("KC-example/filtered_feature_bc_matrix/")
counts = Read10X("KC-example/filtered_feature_bc_matrix/")
scRNA=CreateSeuratObject(counts = counts)
dim(scRNA)
scRNA@assays$RNA@counts[1:4, 1:4]
head(scRNA@meta.data)
feats <- c("nFeature_RNA", "nCount_RNA")
VlnPlot(scRNA, features = feats, pt.size = 0.01, ncol = 2) +
NoLegend()
#计算线粒体基因比例
mito_genes=rownames(scRNA)[grep("^MT-", rownames(scRNA))]
str(mito_genes)
scRNA=PercentageFeatureSet(scRNA, "^MT-", col.name = "percent_mito")
fivenum(scRNA@meta.data$percent_mito)
#计算核糖体基因比例
ribo_genes=rownames(scRNA)[grep("^Rp[sl]", rownames(scRNA),ignore.case = T)]
str(ribo_genes)
scRNA=PercentageFeatureSet(scRNA, "^RP[SL]", col.name = "percent_ribo")
fivenum(scRNA@meta.data$percent_ribo)
#计算红血细胞基因比例
hb_genes=rownames(scRNA)[grep("^Hb[^(p)]", rownames(scRNA),ignore.case = T)]
str(hb_genes)
scRNA=PercentageFeatureSet(scRNA, "^HB[^(P)]", col.name = "percent_hb")
fivenum(scRNA@meta.data$percent_hb)
feats <- c("percent_mito","percent_ribo", "percent_hb")
VlnPlot(scRNA, group.by = "orig.ident", features = feats, pt.size = 0.01, ncol = 3) +
NoLegend()
### （1）bad cells ----
retained_c_umi <- scRNA$nFeature_RNA > 300
retained_c_mito <- scRNA$percent_mito < 15
retained_c_ribo <- scRNA$percent_ribo > 3
retained_c_hb <- scRNA$percent_hb < 0.1
### （2）bad genes ----
retained_f_low <- Matrix::rowSums(scRNA@assays$RNA@counts>0) > 3
### （3）根据上述指标进行过滤
retained_c <- retained_c_umi & retained_c_mito & retained_c_ribo & retained_c_hb
table(retained_c)
retained_f <- retained_f_low
table(retained_f)
scRNA_filt=scRNA[retained_f, retained_c]
dim(scRNA_filt)
feats <- c("nFeature_RNA", "nCount_RNA")
VlnPlot(scRNA_filt, features = feats, pt.size = 0.01, ncol = 2) +
NoLegend()
feats <- c("percent_mito","percent_ribo", "percent_hb")
VlnPlot(scRNA_filt, group.by = "orig.ident", features = feats, pt.size = 0.01, ncol = 3) +
NoLegend()
scRNA=scRNA_filt
scRNA <- NormalizeData(scRNA, normalization.method = "LogNormalize", scale.factor = 10000)
# this sclae step may take a long time if set "vars.to.regress"
scRNA <- ScaleData(scRNA, features = VariableFeatures(scRNA),
vars.to.regress = c("nFeature_RNA","percent_mito"))
scRNA=scRNA_filt
scRNA <- NormalizeData(scRNA, normalization.method = "LogNormalize", scale.factor = 10000)
# this sclae step may take a long time if set "vars.to.regress"
# scRNA <- ScaleData(scRNA, features = VariableFeatures(scRNA),
#                    vars.to.regress = c("nFeature_RNA","percent_mito"))
scRNA <- ScaleData(scRNA, features = VariableFeatures(scRNA))
scRNA <- FindVariableFeatures(scRNA, selection.method = "vst", nfeatures = 2000)
# 可视化高变基因
top10 <- head(VariableFeatures(scRNA), 10)
p_hvg <- VariableFeaturePlot(scRNA)
library(ggplot2)
LabelPoints(plot = p_hvg, points = top10, repel = TRUE, size=2.5) +
theme(legend.position = c(0.1,0.8))
scRNA=scRNA_filt
scRNA <- NormalizeData(scRNA, normalization.method = "LogNormalize", scale.factor = 10000)
# this sclae step may take a long time if set "vars.to.regress"
# scRNA <- ScaleData(scRNA, features = VariableFeatures(scRNA),
#                    vars.to.regress = c("nFeature_RNA","percent_mito"))
scRNA <- ScaleData(scRNA, features = VariableFeatures(scRNA))
scRNA <- FindVariableFeatures(scRNA, selection.method = "vst", nfeatures = 2000)
# 可视化高变基因
top10 <- head(VariableFeatures(scRNA), 10)
p_hvg <- VariableFeaturePlot(scRNA)
library(ggplot2)
LabelPoints(plot = p_hvg, points = top10, repel = TRUE, size=2.5) +
theme(legend.position = c(0.1,0.8))
# 4、降维（PCA、tSNE、UMAP）、分群 ----
scRNA <- RunPCA(scRNA, features = VariableFeatures(scRNA))
ElbowPlot(scRNA, ndims=30, reduction="pca")
pc.num=1:20
# tSNE takes longer time than umap
# scRNA = RunTSNE(scRNA, dims = pc.num)
# DimPlot(scRNA, reduction = "tsne")
scRNA = RunUMAP(scRNA, dims = pc.num)
DimPlot(scRNA, reduction = "umap")
scRNA <- FindNeighbors(scRNA, dims = pc.num)
scRNA <- FindClusters(scRNA, resolution = c(0.01,0.05,0.1,0.2,0.5,0.7,0.9))
library(clustree)
library(patchwork)
clustree(scRNA@meta.data, prefix = "RNA_snn_res.")
#选择合适的resolution
Idents(scRNA) = scRNA$RNA_snn_res.0.2
table(scRNA@active.ident)
p_umap = DimPlot(scRNA, reduction = "umap" ,label = T)
p_umap
scRNA <- RunPCA(scRNA, features = VariableFeatures(scRNA))
ElbowPlot(scRNA, ndims=30, reduction="pca")
pc.num=1:20
# tSNE takes longer time than umap
# scRNA = RunTSNE(scRNA, dims = pc.num)
# DimPlot(scRNA, reduction = "tsne")
scRNA = RunUMAP(scRNA, dims = pc.num)
DimPlot(scRNA, reduction = "umap")
scRNA <- FindNeighbors(scRNA, dims = pc.num)
scRNA <- FindClusters(scRNA, resolution = c(0.01,0.05,0.1,0.2,0.5,0.7,0.9))
library(clustree)
library(patchwork)
clustree(scRNA@meta.data, prefix = "RNA_snn_res.")
#选择合适的resolution
Idents(scRNA) = scRNA$RNA_snn_res.0.2
table(scRNA@active.ident)
p_umap = DimPlot(scRNA, reduction = "umap" ,label = T)
p_umap
#B cell : 9
cg=c("CD79A","CD79B","IGKC","CD19","MZB1","MS4A1")
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip() + p_umap
#T cell : 6
cg=c("CD3D",'CD3E','TRAG','CD3G','CD2')
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
#Cancer cell / Epithelial : 0,3,4,5,10
cg=c("EPCAM","PAX8","KRT18","CD24","KRT19","SCGB2A2","KRT5","KRT15" )
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
#Meyloid cell: 1
cg=c("CD68","LYZ","MARCO","AIF1","TYROBR","MS4A6A","CD1E","IL3RA","LAMP3")
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
#Endothelial cell: 2,8
cg=c("CLDN5","PECAM1","VWF","FLT1","RAMP2")
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
#Fibroblasts(CAF): 7
cg=c("COL1A1","COL1A2","COL3A1","BGN","DCN","POSTN","C1R")
DotPlot(scRNA, assay = "RNA",
features = cg) + coord_flip()  + p_umap
# NK cell
# cg=c("NCR1",'NCAM','KLRC1','KLRC3')
# Mast cell
# cg=c("CPA3",'CMA1','MS4A2','TPSAB1','TPSB2')
# Dendrictic cell
# cg=c("CD1C","CD207","CLEC9A")
# 合并上述所有marker基因
cgs = list(
Epi = c("EPCAM","PAX8","KRT18","CD24","KRT19","SCGB2A2","KRT5","KRT15"),
Meyloid = c("CD68","LYZ","MARCO","AIF1","TYROBR","MS4A6A","CD1E","IL3RA","LAMP3"),
T_cell = c("CD3D",'CD3E','TRAG','CD3G','CD2'),
B_cell = c("CD79A","CD79B","IGKC","CD19","MZB1","MS4A1"),
Endo = c("CLDN5","PECAM1","VWF","FLT1","RAMP2"),
Fibro = c("COL1A1","COL1A2","COL3A1","BGN","DCN","POSTN","C1R")
)
#为了美观的展示dotplot，需要调整cluster的leve水平
scRNA@active.ident = factor(scRNA@active.ident, levels = c(0,3,4,5,10,1,6,9,2,8,7))
DotPlot(scRNA, features = cgs, assay = "RNA") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
p_umap + plot_layout(widths = c(2, 1))
scRNA$celltype = ifelse(scRNA@active.ident %in% c(0,3,4,5,10), "Epi",
ifelse(scRNA@active.ident %in% c(1), "Meyloid",
ifelse(scRNA@active.ident %in% c(6), "T_cell",
ifelse(scRNA@active.ident %in% c(9), "B_cell",
ifelse(scRNA@active.ident %in% c(2,8), "Endo","Fibro")))))
Idents(scRNA) = scRNA$celltype
table(scRNA@active.ident)
scRNA@active.ident = factor(scRNA@active.ident, levels = c("Epi","Meyloid","T_cell",
"B_cell","Endo","Fibro"))
p_umap = DimPlot(scRNA, reduction = "umap")
DotPlot(scRNA, features = cgs, assay = "RNA") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
p_umap + plot_layout(widths = c(2, 1))
?FindClusters
scRNA <- RunPCA(scRNA, features = VariableFeatures(scRNA))
ElbowPlot(scRNA, ndims=30, reduction="pca")
pc.num=1:20
# tSNE takes longer time than umap
# scRNA = RunTSNE(scRNA, dims = pc.num)
# DimPlot(scRNA, reduction = "tsne")
scRNA = RunUMAP(scRNA, dims = pc.num)
DimPlot(scRNA, reduction = "umap")
scRNA <- FindNeighbors(scRNA, dims = pc.num)
scRNA <- FindClusters(scRNA, resolution = c(0.01,0.05,0.1,0.2,0.5,0.7,0.9),
verbose = F)
library(clustree)
library(patchwork)
clustree(scRNA@meta.data, prefix = "RNA_snn_res.")
#选择合适的resolution
Idents(scRNA) = scRNA$RNA_snn_res.0.2
table(scRNA@active.ident)
p_umap = DimPlot(scRNA, reduction = "umap" ,label = T)
p_umap
rm(list = )
rm(list = ls())
